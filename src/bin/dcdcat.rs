extern crate dcdio;

use std::env;
use std::process;
use std::fs::File;
use dcdio::{DcdReader, DcdWriter};

fn main() {
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        let program = &args[0];
        eprintln!("Usage: {} DCDFILE...", program);
        process::exit(1);
    }

    let mut writer;

    {
        let file = File::open(&args[1]).unwrap();
        let reader = DcdReader::new(file).unwrap();
        let mut header = reader.header.clone();
        header.title = "Generated by dcdcat".to_string();

        let outfile = File::create("a.dcd").unwrap();
        writer = DcdWriter::new(outfile, header).unwrap();

        for frame in reader.frames() {
            let frame = frame.unwrap();
            writer.write_frame(&frame.positions).unwrap();
        }
    }

    for fname in &args[2..] {
        let file = File::open(fname).unwrap();
        let reader = DcdReader::new(file).unwrap();

        for frame in reader.frames().skip(1) {
            let frame = frame.unwrap();
            writer.write_frame(&frame.positions).unwrap();
        }
    }
}

